# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Gradle 권한 설정 추가
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      working-directory: ./Location-based-target-authentication
      run: |
        chmod +x ./gradlew
        ./gradlew bootJar --info --stacktrace

    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: app
        path: ./Location-based-target-authentication/build/libs/*.jar
        if-no-files-found: error

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    # JAR 파일 다운로드
    - uses: actions/download-artifact@v4
      with:
        name: app

    # JAR 파일 전송
    - name: Copy JAR via SCP
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "*.jar"
        target: "/home/${{ secrets.SERVER_USER }}"
        debug: true  # 디버그 로그 활성화

    # 서버에서 JAR 실행할 때 로그 확인
    - name: Execute JAR
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /home/${{ secrets.SERVER_USER }}
          # 서비스 설정 파일 생성
          sudo tee /etc/systemd/system/willgo.service << EOF
          [Unit]
          Description=Willgo Backend Application
          After=network.target

          [Service]
          Type=simple
          User=root
          WorkingDirectory=/home/${{ secrets.SERVER_USER }}
          ExecStart=/usr/bin/java -jar Location-based-target-authentication-0.0.1-SNAPSHOT.jar \
            --spring.profiles.active=prod \
            --kakao.api.key=${{ secrets.KAKAO_API_KEY }} \
            --kakao.client.id=${{ secrets.KAKAO_CLIENT_ID }} \
            --kakao.client.secret=${{ secrets.KAKAO_CLIENT_SECRET }} \
            --spring.security.oauth2.client.registration.google.client-id=${{ secrets.GOOGLE_CLIENT_ID }} \
            --spring.security.oauth2.client.registration.google.client-secret=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            --jwt.secret-key=${{ secrets.JWT_SECRET_KEY }} \
            --spring.mail.username=${{ secrets.MAIL_USERNAME }} \
            --spring.mail.password=${{ secrets.MAIL_PASSWORD }}
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOF

          # 서비스 시작
          sudo systemctl daemon-reload
          sudo systemctl restart willgo
          sudo systemctl status willgo
